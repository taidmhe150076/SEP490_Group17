@page "/variousWorkshops"
@model COTSEClient.Pages.Report.VariousWorkshopsModel
@{
    Layout = "_Layout";
}
<head>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
</head>
<div class="container px-5 my-5">
    <div class="text-center mb-5">
        <h1 class="display-5 fw-bolder mb-0"><span class="text-gradient d-inline">Visualizes Interest Levels for Various Series WorkShop @Model.SeriesWsName</span></h1>
    </div>
    <div class="row gx-5 justify-content-center">
        <div class="col-lg-11 col-xl-9 col-xxl-8">
            @if (Model.WorkShopList != null)
            {
                <div class="card-body p-3" style="display: flex; flex-wrap: wrap;">
                    <div style="width:100%;">
                        <p class="display-5 fw-bolder mb-0"><span class="text-gradient d-inline"></span></p>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">Tiêu đề</th>
                                    <th scope="col">Số lượng ưa thích</th>
                                    <th scope="col">Trạng thái</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (var i = 0; i < Model.WorkShopList.Count; i++)
                                {
                                    var item = Model.WorkShopList[i];
                                    <tr>
                                        <td>@item.WorkshopName</td>
                                        <td>@item.Index</td>
                                        <td>@item.Status?.Status</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<div class="row gx-5 justify-content-center">
    <div id="timer"></div>
    <input style="width:100px;height:50px;" class="btn btn-primary px-4 py-3" type="button" id="playButton" value="Play">
    <canvas id="racingChart"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<!-- Include Chart.js Datalabels plugin -->
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>

<script>
    $(document).ready(function () {
        Chart.register(ChartDataLabels);
        // Access the model data
        const participants = @Html.Raw(Json.Serialize(Model.ListParticipant));

        // Function to calculate percentage of favorite topics
        function calculatePercentages(participants) {
            const topicSet = new Set();
            const totalParticipants = participants.length;

            participants.forEach(participant => {
                const topics = participant.favoriteTopics.split(',').map(topic => topic.trim()).filter(topic => topic !== '');
                topics.forEach(topic => {
                    topicSet.add(topic);
                });
            });

            const topicArray = Array.from(topicSet);
            const topicCounts = {};

            participants.forEach(participant => {
                const topics = participant.favoriteTopics.split(',').map(topic => topic.trim()).filter(topic => topic !== '');
                topics.forEach(topic => {
                    if (!topicCounts[topic]) {
                        topicCounts[topic] = 0;
                    }
                    topicCounts[topic]++;
                });
            });

            const percentages = {};

            for (const topic in topicCounts) {
                let count = 0;
                participants.forEach(participant => {
                    const topics = participant.favoriteTopics.split(',').map(topic => topic.trim());

                    if (topics.includes(topic)) {
                        count++;
                    }
                });
                percentages[topic] = (count / totalParticipants) * 100;
                console.log("count:" + count);
                console.log("totalParticipants" + totalParticipants);
                console.log("topic" + topic);

            }

            return { labels: topicArray, percentages: percentages };
        }
        let chart;
        // Function to render the racing bar chart
        function renderChart(participants) {

            const ctx = document.getElementById('racingChart').getContext('2d');

            // get date
            const defaultStartDate = new Date(participants[0].timeStamp);
            const defaultEndDate = new Date(participants[participants.length - 1].timeStamp);

            let { labels, percentages } = calculatePercentages(participants.filter(participant => new Date(participant.timeStamp) >= defaultStartDate && new Date(participant.timeStamp) <= defaultEndDate));
            let data = labels.map(label => percentages[label]);

            // const sortedLabels = labels.slice().sort((a, b) => percentages[b] - percentages[a]);
            // const sortedPercentages = sortedLabels.map(label => percentages[label]);

            console.log(labels);
            console.log(participants);

            function generateRandomColors(numColors) {
                const colors = [];
                for (let i = 0; i < numColors; i++) {
                    const color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 0.2)`;
                    colors.push(color);
                }
                return colors;
            }

            const numColors = data.length;
            const colors = generateRandomColors(numColors);

            chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Percent Favorite Topics',
                        data: data,
                        backgroundColor: colors,
                        borderColor: colors.map(color => color.replace('0.2', '0')),
                        borderWidth: 1
                    }]
                },
                options: {
                    indexAxis: 'y',
                    scales: {
                        y: {
                            ticks: {
                                font: {
                                    size: 16,
                                    weight: 'bold'
                                }
                            }
                        },
                        x: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        datalabels: {
                            anchor: 'end',
                            align: 'start',
                            formatter: function (value) {
                                return value.toFixed(2) + '%';
                            },
                            font: {
                                weight: 'bold',
                                size: 16
                            }
                        }
                    },
                    barThickness: 50
                }
            });

            $("#timeRangeSlider").slider({
                range: true,
                min: defaultStartDate.getTime(),
                max: defaultEndDate.getTime(),
                step: 86400000, // Mỗi ngày
                values: [defaultStartDate.getTime(), defaultEndDate.getTime()],
                slide: function (event, ui) {
                    let startDate = new Date(ui.values[0]);
                    let endDate = new Date(ui.values[1]);
                    updateChart(startDate, endDate);
                }
            });

            function updateChart(startDate, endDate) {

                let filteredParticipants = participants.filter(participant => new Date(participant.timeStamp) >= startDate && new Date(participant.timeStamp) <= endDate);
                let { labels, percentages } = calculatePercentages(filteredParticipants);
                let newData = labels.map(label => percentages[label]);

                const sortedLabels = labels.slice().sort((a, b) => percentages[b] - percentages[a]);
                const sortedPercentages = sortedLabels.map(label => percentages[label]);

                chart.data.labels = sortedLabels;
                chart.data.datasets[0].data = sortedPercentages;
                chart.update();
            }
            // var startDate = new Date(@Html.Raw(Json.Serialize(Model.StartDate)));
            // var endDate = new Date(@Html.Raw(Json.Serialize(Model.EndDate)));

            // console.log(startDate);
            // console.log(endDate);

            // function updateTimer() {
            //     Tính toán khoảng cách thời gian hiện tại
            //     var currentTime = new Date(startDate.getTime() + 3600 * 1000); Thêm 1 giờ vào thời gian bắt đầu
            //     startDate = currentTime;
            //     if (currentTime >= endDate) {
            //         clearInterval(timerInterval); Dừng bộ đếm thời gian
            //         document.getElementById('timer').innerHTML = 'Đếm thời gian kết thúc!';
            //         return;
            //     }
            //     Hiển thị thời gian
            //     document.getElementById('timer').innerHTML = currentTime.toString();
            //     updateChart(new Date(@Html.Raw(Json.Serialize(Model.StartDate))), currentTime);
            // }

            // Cập nhật đồng hồ mỗi 1000ms (1 giây)
            // var timerInterval = setInterval(updateTimer, 100);

            document.getElementById('playButton').addEventListener('click', function () {
                var startDate = new Date(@Html.Raw(Json.Serialize(Model.StartDate)));
                var endDate = new Date(@Html.Raw(Json.Serialize(Model.EndDate)));

                console.log(startDate);
                console.log(endDate);

                var timerInterval; // Biến này sẽ lưu trữ ID của bộ đếm thời gian

                function updateTimer() {
                    // Tính toán khoảng cách thời gian hiện tại
                    var currentTime = new Date(startDate.getTime() + 3600 * 1000); // Thêm 1 giờ vào thời gian bắt đầu
                    startDate = currentTime;
                    if (currentTime >= endDate) {
                        clearInterval(timerInterval); // Dừng bộ đếm thời gian
                        document.getElementById('timer').innerHTML = 'Đếm thời gian kết thúc!';
                        updateChart(new Date(@Html.Raw(Json.Serialize(Model.StartDate))), currentTime);

                        return;
                    }
                    // Hiển thị thời gian
                    document.getElementById('timer').innerHTML = currentTime.toString();
                    updateChart(new Date(@Html.Raw(Json.Serialize(Model.StartDate))), currentTime);
                }

                // Cập nhật đồng hồ mỗi 1000ms (1 giây)
                timerInterval = setInterval(updateTimer, 100);
            });
        }
        // Render the chart when the page is loaded
        renderChart(participants);

    });
</script>